@using BanSach.Utility
@model BanSach.Model.ViewModel.OrderListViewModel

<h2>Order Management</h2>
<br />

<!-- Bộ lọc trạng thái -->
<div class="col-md-2">
    <h5>Filter by Status</h5>
    <select class="form-select" id="statusFilter" onchange="applyFilters()">
        <option value="All">All</option>
        <option value="Pending">Pending</option>
        <option value="Approved">Approved</option>
        <option value="Processing">Processing</option>
        <option value="Shipped">Shipped</option>
        <option value="Cancelled">Cancelled</option>
        <option value="Refunded">Refunded</option>
    </select>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Order ID</th>
            <th>User Name</th>
            <th>Product Details</th>
            <th>Total Price</th>
            <th>Order Date</th>
            <th>Shipping Date</th>
            <th>Order Status</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody id="orderTable">
        @{
            int i = (Model.PagingInfo.CurrentPage - 1) * Model.PagingInfo.ItemsPerPage + 1;
        }
        @foreach (var order in Model.Orders)
        {
            <tr data-status="@order.OrderHeader.OrderStatus">
                <td>@i</td>
                <td>@order.OrderHeader.ApplicationUser.Name</td>
                <td>
                    @foreach (var detail in order.OrderDetail)
                    {
                        <span>@detail.Product?.Name x @detail.Count</span>
                        <br />
                    }
                </td>
                <td>@order.OrderHeader.OrderTotal €</td>
                <td>@order.OrderHeader.OrderDate.ToString("dd/MM/yyyy")</td>
                <td>@order.OrderHeader.ShippingDate.ToString("dd/MM/yyyy")</td>
                <td>
                    <span class="badge @GetStatusBadgeClass(order.OrderHeader.OrderStatus)">
                        @order.OrderHeader.OrderStatus
                    </span>
                </td>

                <td>
                    @if (order.OrderHeader.OrderStatus == SD.StatisPending || order.OrderHeader.OrderStatus == SD.StatusApproved)
                    {
                        <button type="button" class="btn btn-primary" onclick="updateStatus('@order.OrderHeader.Id', 'processing')">Process</button>
                        <button type="button" class="btn btn-warning" onclick="updateStatus('@order.OrderHeader.Id', 'cancel')">Cancel</button>
                        <button type="button" class="btn btn-info" onclick="printOrder('@order.OrderHeader.Id')">Print</button>


                    }
                    @if (order.OrderHeader.OrderStatus == SD.StatusInProcess)
                    {
                        <button type="button" class="btn btn-success" onclick="updateStatus('@order.OrderHeader.Id', 'shipped')">Shipped</button>
                        <button type="button" class="btn btn-warning" onclick="updateStatus('@order.OrderHeader.Id', 'cancel')">Cancel</button>
                    }
                    
                    @if (order.OrderHeader.OrderStatus == SD.StatusShipped)
                    {
                        <button type="button" class="btn badge-refunded" onclick="updateStatus('@order.OrderHeader.Id', 'refund')">Refund</button>
                        <button type="button" class="btn btn-danger" onclick="deleteOrder('@order.OrderHeader.Id')">Delete</button>
                    }
                    @if (order.OrderHeader.OrderStatus == SD.StatusRefunded || order.OrderHeader.OrderStatus == SD.StatusCancelled)
                    {
                        <button type="button" class="btn btn-danger" onclick="deleteOrder('@order.OrderHeader.Id')">Delete</button>
                    }
                </td>
            </tr>
            i++;
        }
    </tbody>
</table>

<div class="col-12 pb-1">
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center mb-3">
            @if (Model.PagingInfo.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" asp-action="Index" asp-route-orderPage="@(Model.PagingInfo.CurrentPage - 1)">
                        &laquo; Previous
                    </a>
                </li>
            }

            @for (int j = 1; j <= Model.PagingInfo.TotalPage; j++)
            {
                <li class="page-item @(j == Model.PagingInfo.CurrentPage ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-orderPage="@j">@j</a>
                </li>
            }

            @if (Model.PagingInfo.CurrentPage < Model.PagingInfo.TotalPage)
            {
                <li class="page-item">
                    <a class="page-link" asp-action="Index" asp-route-orderPage="@(Model.PagingInfo.CurrentPage + 1)">
                        Next &raquo;
                    </a>
                </li>
            }
        </ul>
    </nav>
</div>

@section Scripts {
    <style>
        .badge-pending {
            background-color: #ffc107;
            color: #212529;
        }

        .badge-approved {
            background-color: #28a745;
            color: white;
        }

        .badge-processing {
            background-color: #17a2b8;
            color: white;
        }

        .badge-shipped {
            background-color: #17a2b8;
            color: white;
        }

        .badge-cancelled {
            background-color: #dc3545;
            color: white;
        }

        .badge-refunded {
            background-color: #6f42c1;
            color: white;
        }

        .btn-warning {
            background-color: #ff9800;
            color: white;
        }

        .btn-info {
            background-color: #17a2b8;
            color: white;
        }

        .btn-print {
            background-color: black;
            color: white;
        }
    </style>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script type="text/javascript">
        function updateStatus(orderId, status) {
            Swal.fire({
                title: "Are you sure?",
                text: `You will update the status to ${status}!`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn-primary",
                confirmButtonText: "Yes, update it!",
                cancelButtonText: "Cancel",
                closeOnConfirm: false
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "POST",
                        url: `/Admin/Order/${status == 'shipped' ? 'MarkAsShipped' : status == 'cancel' ? 'MarkAsCancelled' : status == 'processing' ? 'MarkAsProcessing' : 'MarkAsRefunded'}`,
                        data: { orderId: orderId },
                        success: function (data) {
                            if (data.success) {
                                toastr.success(data.message);
                                location.reload();
                            } else {
                                toastr.error(data.message);
                            }
                        },
                        error: function () {
                            toastr.error('An error occurred while updating the status.');
                        }
                    });
                }
            });
        }

        function deleteOrder(orderId) {
            Swal.fire({
                title: "Are you sure?",
                text: "You will not be able to recover this record!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn-danger",
                confirmButtonText: "Yes, delete it!",
                closeOnConfirm: false
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "POST",
                        url: "/Admin/Order/DeleteOrder",
                        data: { orderId: orderId },
                        success: function (data) {
                            if (data.success) {
                                toastr.success(data.message);
                                location.reload();
                            } else {
                                toastr.error(data.message);
                            }
                        },
                        error: function () {
                            toastr.error('An error occurred while deleting the order.');
                        }
                    });
                }
            });
        }

        function applyFilters() {
            var selectedStatus = document.getElementById('statusFilter').value;
            var rows = document.querySelectorAll('#orderTable tr');

            rows.forEach(row => {
                var status = row.getAttribute('data-status');
                if (selectedStatus === "All" || selectedStatus === status) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }


            function printOrder(orderId) {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("PrintOrder", "Order")',
                    data: { orderId: orderId },
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX error:", status, error);
                        alert("An error occurred while processing the print request.");
                    }
                });
            }

    </script>
}

@functions {
    string GetStatusBadgeClass(string? status)
    {
        return status switch
        {
            SD.StatisPending => "badge-pending",
            SD.StatusApproved => "badge-approved",
            SD.StatusInProcess => "badge-processing",
            SD.StatusShipped => "badge-shipped",
            SD.StatusCancelled => "badge-cancelled",
            SD.StatusRefunded => "badge-refunded",
            _ => "badge-pending"
        };
    }
}
